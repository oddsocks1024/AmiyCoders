@database amiydec.guide
@Width 80

@Node Main "amiyenc.guide"

                                  AmiyEnc V0.6
                                  ============

                                 by Ian Chapman
                         ian.chapman@amiga-hardware.com

                         http://www-unix-city.co.uk/iss

                            @{" Disclaimer            " Link "Disclaimer"}
                            @{" What is AmiyEnc?      " Link "What"}
                            @{" Usage                 " Link "Usage"}
                            @{" Error Messages        " Link "Errors"}
                            @{" Contact & Bug Reports " Link "Contact"}
                            @{" History               " Link "History"}
                            @{" To Do                 " Link "To Do"}

@endnode

@node "Disclaimer" "Disclaimer"

                                   DISCLAIMER
                                   ==========

Use of this software is entirely at your own risk. You accept any consequences
whatsoever as a result of using this software, whether intentional or
accidental. This includes, but is not limited to, damage to hardware, software
or legal actions taken as a direct or indirect result of using this software.

There is no warranty, either expressed or implied

@endnode
@node "What" "What is AmiyEnc?"

                                What is AmiyEnc?
                                ================

AmiyEnc is a utility for encoding files using the yEnc encoding scheme. yEnc
encoded files are becoming more popular on places like Usenet. yEnc is similar
in principle to UUencoded and Base64 encoded files which you may be more
familiar with. Base64 and UUencode convert binary files to 7bit ASCII for
transmission over services which do not allow binary such as E-Mail. Usenet
however allows many 8bit ASCII characters and yEnc takes advantage of this. The
resulting encoded file is significantly smaller than the UUencoded or Base64
encoded version. yEnc also has provision for encoding a file in several parts.
This means that only a single part has to be resent, not the whole file if it
becomes corrupt.
    For example a small test with a 512k file produced these results:

        UUencoded: 718.2k
        Base64   : 693.4k
        yEnc     : 522.9k

For additional information, please see http://www.yenc.org

@endnode
@node "Usage" "Usage"

                                     Usage
                                     =====

AmiyEnc is based around the yEnc v1.3 specification including support for
CRC32 checksumming and @{"multi-part" Link "enctypes"} encodings..

    amiyenc <input file> [DEST=<output file>] [LINE=<N>] [MULTI=<N>] [FORCE]

Input file is the file you wish to encode, and DEST is the file you want to
write the encoded version to. If DEST is not specified, then amiyenc will use
the same name as the inputfile, but append ".ync" on the end. The LINE parameter
doesn't really affect the encoding but is intended to help newsreaders display
yEnc encode files neatly. LINE is a numerical value between 64 and 997 and
specifies after how many characters the EOL sequence should be written. If not
specified, LINE defaults to 128. The MULTI parameter tells AmiyEnc to encode the
file using @{"multi-part" Link "enctypes"} encoding and split the file every "N" bytes. AmiyEnc will
write each part using the name supplied and append a number sequence to each
part. The FORCE switch will overwrite files if they already exist, otherwise
AmiyEnc will abort with a warning.

Note: When using the MULTI option, each part will be approximately the size
      specified, not the exact size. This is simply due to the way yEnc works.

Examples:

    @{b}amiyenc work:myfile DEST=ram:myfile.ync@{ub}

    Encodes work:myfile and writes it to ram:myfile.ync

    @{b}amiyenc work:pic.iff DEST=ram:pic.ync LINE=256@{ub}

    Encodes work:pic.iff and writes it to ram:pic.ync, using a line length of
    256

    @{b}amiyenc mybigfile DEST=ram:mybigfile MULTI=500000@{ub}

    Encodes mybigfile using @{"multi-part" Link "enctypes"} encoding and writes each part to RAM:
    Each part will be around 500,000 bytes and be named ram:mybigfile.001,
    ram:mybigfile.002 ....

Upon failure, amiyenc sets a return code value, which is useful if you wish to
use the command in scripts. The environment variable RC holds the return code of
the last executed command. Please see @{" Error Messages " Link "Errors"} for more details


@endnode

@node "Errors" "Error Messages"

                                 Error Messages
                                 ==============
RC = Return Code

RC: 0,

   Normal program exit. Program completed successfully.

RC: 1, @{b}[ERROR: Unable to open input file.]@{ub}

   Could be for various reasons including, non existant file, file is read
   locked, or some other miscellaneous disk error.

RC: 2, @{b}[ERROR: Unable to allocate enough memory for buffer.]@{ub}

   A large enough block of memory is not available to load your file either
   because you do not have enough free memory, or it has become highly fragmented.

RC: 3, @{b}[ERROR: Unable to read all of the input file.]@{ub}

   The input file was partially read, but could not continue, probably because
   of a disk error. Encoding is aborted.

RC: 4, @{b}[ERROR: Unable to open output file.]@{ub}

   Could be for various reasons including, destination is write-protected, write
   locked, or some other miscellaneous disk error.

RC: 5,

   Invalid command line parameters, usage instructions will be displayed.

RC: 6, @{b}[ERROR: Line parameter out of range.]@{ub}

   The line parameter must be within the range 64 to 997. These are the
   recommended limits in the yEnc specification.

RC: 7, @{b}[ERROR: Produces more than 999 parts. Increase multi value.]@{ub}

   The value you have chosen for MULTI, means that more than 999 parts would be
   required. You should increase the value for MULTI.

RC: 8, @{b}[WARNING: File already exists.]@{ub}

   The output file already exists. If you wish to overwrite it, then use the FORCE switch.

RC: X, @{b}[ERROR: Unknown exception X. Please report to author.]@{ub}

   You should NEVER see this message, however if you do, please do report it to
   me immediately. Please include the full error message and any details of what
   triggered the error.

@endnode

@node "Contact" "Contact"

                                    Contact
                                    =======


E-Mail: ian.chapman@amiga-hardware.com

If you wish to make a bug report, or suggestions then feel free to E-Mail me at
the above address. Feel free to contact me about AmiyEnc in general. If I know
people are using it, it keeps me motivated to update it.

@endnode

@node "History" "History"

Version 0.6
-----------

ADDED: Now escapes the "." char in encodings. Not strictly part of the spec
       but is recommended to help some decoders which read from a socket stream
ADDED: Now replaces the chars \<>"@ with _ when encoding the filename as  as they
       are no longer permitted.
ADDED: Now warns you when trying to encode a zero length file instead of just
       ignoring it
OPTIMISED: Encoding routine, approximately 28% faster.

Version 0.5
-----------

ADDED: Return codes so that command can easily be used in scripts.
ADDED: Additional version compiled with optimisation (not supported).

Version 0.4
-----------

ADDED: FORCE parameter

Version 0.3beta
---------------

ADDED:   Added support for @{"multi-part" Link "enctypes"} encoding.
CHANGED: Major rework on the code. It is now much less monolithic and much more
         procedural
CHANGED: Shares more code with AmiyDec which means less development work.
CHANGED: Reformatted the output text, looks neater :)
CHNAGED: V0.2 command line parameters are NOT compatible with V0.3beta

Version 0.2
-----------

Initial Release.

@endnode

@node "To Do" "To Do"

                                     To Do
                                     =====

Here is a list of features I may add in the future.

- Support for encoding more than one file.
- Support for wildcards
- Support for yEnc V2 (probably when/if the standard is finalised).

@endnode

@node "enctypes" "Encoding Types"

                                 Encoding Types
                                 --------------

There are two slight variations of yEncoding, these are Single-Part encoding,
and Multi-Part encoding.

Single-Part Encoding
--------------------

The original yEnc specification did not support the splitting of an encoded file
into separate chunks. For example, an encoded 5MB file would have to be sent entirely
in one message and if the file is corrupted, the whole 5MB must be sent again.
This is what Multi-Part encoding attempts to solve.

Multi-Part Encoding
-------------------

Multi-Part encoding is the ability to split an encoded file into several chunks
so you can transmit them all in a single message, or send them in multiple messages.
For example, you can encode a 5MB file into 5 x 1MB chunks, and each chunk can be
sent separately in a different message. Clearly this has several benefits over
single-part encoding. You could send 3 x 1MB chunks one day, then the remaining
2 x 1MB chunks the next day, etc. The other major benefit is, if one of the chunks
becomes corrupted, you only have to send that chunk again, not the whole file.

It is important at this point to understand that it is entirely possible to have
a multi-part encoding which consists of only @{b}one@{ub} part. This does make
single-part encoding rather pointless, but it has to be supported for legacy
reasons.


@endnode
