@database amiydec.guide
@Width 80

@Node Main "amiydec.guide"

                                  AmiyDec V0.6
                                  ============

                                 by Ian Chapman
                         ian.chapman@amiga-hardware.com

                         http://www.unix-city.co.uk/iss

                            @{" Disclaimer             " Link "Disclaimer"}
                            @{" What is AmiyDec?       " Link "What"}
                            @{" Usage                  " Link "Usage"}
                            @{" Caveats                " Link "Caveats"}
                            @{" Error Messages         " Link "Errors"}
                            @{" Contact & Bug Reports  " Link "Contact"}
                            @{" History                " Link "History"}
                            @{" To Do                  " Link "To Do"}

@endnode

@node "Disclaimer" "Disclaimer"

                                   DISCLAIMER
                                   ==========

Use of this software is entirely at your own risk. You accept any consequences
whatsoever as a result of using this software, whether intentional or
accidental. This includes, but is not limited to, damage to hardware, software
or legal actions taken as a direct or indirect result of using this software.

There is no warranty, either expressed or implied

@endnode
@node "What" "What is AmiyDec?"

                                What is AmiyDec?
                                ================

AmiyDec is a utility for decoding yEnc encoded files which are becoming
more popular on places like Usenet. yEnc is similar in principle to UUencoded
or Base64 encoded files which you may be more familiar with. Base64 and UUencode
convert binary files into 7bit ASCII for transmission over services which do not
allow binary such as E-Mail. Usenet however allows many 8bit ASCII characters and
yEnc takes advantage of this. The resulting encoded file is significantly smaller
than the UUencoded or Base64 encoded version. yEnc also has provision for
encoding a file in several parts. This means that only a single part has to be
resent, not the whole file if it becomes corrupt.
    For example a small test with a 512k file produced these results:

        UUencoded: 718.2k
        Base64   : 693.4k
        yEnc     : 522.9k

@endnode
@node "Usage" "Usage"

                                     Usage
                                     =====

AmiyDec is based around the yEnc v1.3 specification, including support for
CRC32 checksumming, and @{"multi-part" Link "enctypes"} encodings. 

If the encoding is contained in a message saved from a newsreader for example,
you do not have to strip out anything unrelated to yEnc. AmiyDec should handle
this automatically.

    amiydec <input files> [DEST=<output directory>] [DEBUG] [FORCE]

<input files> are the files you wish to decode. You can specify more than one
file and each file must be separated by a space. For @{"multi-part" Link "enctypes"} encodings you
MUST place the filenames in the correct order. DEST is the location where you
wish to write the decoded files. If the destination is not specified then
AmiyDec will use the current directory by default. The DEBUG switch enables
debugging output and the FORCE switch will overwrite files if they already
exist instead of aborting with a warning.

Examples:

    @{b}amiydec test.ync DEST=RAM:@{ub}

    Decodes test.ync and writes the decoded file to RAM:

    @{b}amiydec misc.ync DEST=Work:myfiles/ DEBUG@{ub}

    Decodes misc.ync and writes the decoded file to Work:myfiles/ , debugging
    output is enabled.

    @{b}amiydec file1 file2 file3 DEST=Work:@{ub}

    Decodes file1, file2, file3 and writes the decoded files to Work:

    @{b}amiydec file1 file2 file3@{ub}

    Decodes file1, file2, file3 and writes the decoded files to the current
    directory.

Upon failure, amiyenc sets a return code value, which is useful if you wish to
use the command in scripts. The environment variable RC holds the return code of
the last executed command. Please see @{" Error Messages " Link "Errors"} for more details


@endnode
@node "Caveats" "Caveats"

                                    Caveats
                                    =======

1. Several really broken encoders exist. This is not entirely the fault of the
   programmers because the "yEnc" specification is not very formal, and even
   contradicts itself! Some broken encoders are:

    Broken Encoders:
    NNTP POWER POST 2000 (Build 25b; yEnc) (creating crc32=00000001 as default)
    NNTP POWER POST 2000 (Build 24c)
    yPost / 0.45 (The part= paramater is missing in the =yend line for multiparts)
    MT Newswatcher 3.2 (creating =ypart begin=0 .... end=<filesize>)

2. Whilst AmiyDec handles files which contain several @{"single-part" Link "enctypes"} encodings, or mixed
@{"single-part" Link "enctypes"} encodings and a @{"multi-part" Link "enctypes"}  encoding, DO NOT pass it more than one
@{"multi-part" Link "enctypes"} encoding at a time or chances are it will become hopelessly confused
:-)

@endnode
@node "Errors" "Error Messages"

                                 Error Messages
                                 ==============

Not all errors will cause Amiydec to abort the decoding process, many errors
still allow for the successful decoding of a file. In the case where multiple
errors occur, the return code will usually be equal to the last error.

RC = Return code

RC: 0,

   Normal program exit. Program completed successfully, or...

RC: 1, @{b}[ERROR: Missing line parameter]@{ub}

   The line parameter is missing in the encoding, but Amiydec should be able to
   decode it anyway.

RC: 2, @{b}[ERROR: Missing size parameter]@{ub}

   The size parameter is missing in the encoding, but Amiydec should be able to
   decode it anyway.

RC: 3, @{b}[ERROR: Missing filename parameter from header.]@{ub}

   The filename parameter is compulsory and is missing from the yEnc header.
   Decoding is aborted.

RC: 4, @{b}[ERROR: Unable to open input file or file too small.]@{ub}

   Could be for various reasons including, non existant file, file is read
   locked, the file is smaller than 30 bytes or some other miscellaneous
   disk error.

RC: 5, @{b}[ERROR: Unable to allocate enough memory for buffer.]@{ub}

   A large enough block of memory is not available to load your file, either
   because you do not have enough free memory, or it has become highly fragmented.

RC: 6, @{b}[ERROR: Unable to read all of the input file]@{ub}

   The input file was partially read, but could not continue, probably because
   of a disk error. Decoding is aborted.

RC: 7, @{b}[ERROR: Unable to open output file.]@{ub}

   Could be for various reasons including, destination is write-protected, write
   locked, or some other miscellaneous disk error.

RC: 8, @{b}[ERROR: Premature end of encoding, file may be corrupt.]@{ub}

   AmiyDec did not find a valid yEnc trailer before it encountered the end of
   the file. The decoded file is probably corrupt.

RC: 9

   The command line argmuments passed to Amiydec are incorrect.

RC: 10, @{b}[ERROR: Multi-part encoding, out of order. Need part X, got part Y.]@{ub}

   AmiyDec must receive the parts of a @{"multi-part" Link "enctypes"} encoding, in order. For
   example, Part1,Part2,Part3 is correct, Part3,Part1,Part2 is incorrect.
   AmiyDec will report the part number it expected to get, and the part number it
   actually got.

RC: 11, @{b}[WARNING: File already exists.]@{ub}

   The output file already exists. If you wish to overwrite it, then use the FORCE switch.

RC: 100, @{b}[ERROR: CRC32 mismatch, file is corrupt.]@{ub}
         @{b}[ERROR: CRC32 mismatch, part x is corrupt.]@{ub}

   The CRC32 checksum stated in the yEnc header does not match the CRC32
   checksum calculated by AmiyDec. The decoded file or part will be
   corrupt.

RC: 101, @{b}[ERROR: File size mismatch between header and decoded file.]@{ub}

   This means the file size stated in the yEnc header does not match the decoded
   file's size. The decoded file is probably corrupt.

RC: 102, @{b}[ERROR: X parts are missing from multi-part encoding]@{ub}

    In order to decode a multi-part encoding, amiydec requires all parts and
    some are missing

RC: 103, @{b}[WARNING: Total parameter missing. Assuming only 1 part.]@{ub}

   AmiyDec could not find the total parameter in the header of a @{"multi-part" Link "enctypes"}
   encoding. Technically you can have a yEncoding without the total parameter
   however this is bad practice for encoders. AmiyDec will assume and decode
   only the first part.

RC: 104, @{b}[WARNING: File does not contain a valid yEnc encoding.]@{ub}

   AmiyDec could not find a yEnc header in the input file.

RC: X, @{b}[Unknown exception X. Please report to author.]@{ub}

   You should NEVER see this message, however if you do, please do report it to
   me immediately. Please include the full error message and any details of what
   triggered the error.

@endnode
@node "Contact" "Contact"

                                    Contact
                                    =======


E-Mail: ian.chapman@amiga-hardware.com

If you wish to make a bug report, please ensure that you are not trying to
decode a file which was created with a broken encoder. See @{" Caveats " Link "Caveats"}.
This is far from being an exhaustive list, and infact every bug report I've
received about encodings which amiydec can't handle are because they were
created with a faulty encoder. I will of course endeavour to fix any genuine
bugs. It is also useful to send me the informatiom generated from using the
DEBUG option and if possible the encoding which triggered the problem.

Feel free to contact me about AmiyDec in general. If I know people are using it,
it keeps me motivated to update it. :-)

@endnode

@node "History" "History"

Version 0.6
-----------

ADDED: Checks if the input file is smaller than 30 bytes and aborts if that is
       the case. The smallest legal encoding possible is around 67 bytes and
       the smallest broken encoding that amiydec can handle is about 30bytes.
ADDED: The characters :/?#%{};| are now explicitly converted to "_" when decoding
       a filename, as opposed to just warning that the output filename may contain
       wildcard characters.

Version 0.5
-----------

ADDED: Return codes so that command can easily be used in scripts.
       (Thanks to Brian HAUG)
ADDED: Additional version compiled with optimisation (not supported)

Version 0.4
-----------

FIXED:   If a multi-part encoding had a missing total parameter, it would report
         "-1 parts missing" instead of reporting a missing total parameter.
         (Thanks to Jules)
CHANGED: Assumes that multi-part encodings with a missing total parameter, only
         consist of 1 part.
ADDED:   Support for encodings made by broken encoders which only use LF line
         termination instead of CRLF. (Thanks to Jules)
ADDED:   If AmiyDec receives a multi-part encoding out of order, it now reports
         which part it needs, and which part it got.
ADDED:   FORCE parameter.


Version 0.3beta
---------------

ADDED:   Now handles multiple @{"single-part" Link "enctypes"} encodings in one file.
ADDED:   Now handles @{"multi-part" Link "enctypes"} encodings.
ADDED:   You can now pass multiple files to AmiyDec
CHANGED: Major rework on the code. It is now much less monolithic and much more
         procedural.
CHANGED: Shares more code with AmiyEnc which means less development work.
CHANGED: Reformatted the output text, looks neater. :)
CHANGED: Minor changes to the error messages.
CHANGED: V0.2 command line parameters are NOT compatible with V0.3beta
FIXED:   If you specified "" (ie current directory) to write the output files
         to, they would get written to the directory above the current working
         directory.

Version 0.2
-----------

CHANGED: Improved handling of filenames in yEnc encoded files:
  * Trailing spaces are removed, if not contained in (") delimeters.
  * Speech marks (") are removed from speech mark delimited file names.
  * The illegal filename character, colon (:) is converted to an underscore (_)
  * The illegal filename character, forward slash (/) is converted to an
    underscore (_)
  * Warnings are generated for the following characters,
    hash (#), question mark (?), left brace ({), right brace (}), pipe (|) and
    semi-colon (;). They are legal in file names but also have other meanings
    in AmigaDOS such as wildcards or comments and can therefore cause problems.

CHANGED: Various cleanups in the code

Version 0.1
-----------

Initial Release.

@endnode

@node "To Do" "To Do"

                                     To Do
                                     =====

Here is a list of features I may add in the future.

- A parameter to override the default filename.
- Support for yEnc V2 (probably when/if the standard is finalised).
- Support for wildcards.

@endnode

@node "enctypes" "Encoding Types"

                                 Encoding Types
                                 --------------

There are two slight variations of yEncoding, these are Single-Part encoding,
and Multi-Part encoding.

Single-Part Encoding
--------------------

The original yEnc specification did not support the splitting of an encoded file
into separate chunks. For example, an encoded 5MB file would have to be sent entirely
in one message and if the file is corrupted, the whole 5MB must be sent again.
This is what Multi-Part encoding attempts to solve.

Multi-Part Encoding
-------------------

Multi-Part encoding is the ability to split an encoded file into several chunks
so you can transmit them all in a single message, or send them in multiple messages.
For example, you can encode a 5MB file into 5 x 1MB chunks, and each chunk can be
sent separately in a different message. Clearly this has several benefits over
single-part encoding. You could send 3 x 1MB chunks one day, then the remaining
2 x 1MB chunks the next day, etc. The other major benefit is, if one of the chunks
becomes corrupted, you only have to send that chunk again, not the whole file.

It is important at this point to understand that it is entirely possible to have
a multi-part encoding which consists of only @{b}one@{ub} part. This does make
single-part encoding rather pointless, but it has to be supported for legacy
reasons.


@endnode
